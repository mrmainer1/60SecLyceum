using System.Linq;using Project.Scripts.Item;using UnityEditorInternal;namespace Project.Scripts.Inventory.Base{    public class InventoryRemover    {        private readonly Inventory inventory;        public InventoryRemover(Inventory inventory)        {            this.inventory = inventory;        }        public bool TryRemoveItem(ItemData itemData, int amount = 1)        {            if (!HasEnoughItems(itemData, amount))                return false;            RemoveItem(itemData, amount);            return true;        }        public void RemoveAll()        {            foreach (var itemStack in inventory.Items.ToList())            {                inventory.Items.Remove(itemStack);            }            inventory.RemoveAllItemNotifier.Notify();        }        private void RemoveItem(ItemData itemData, int amount)        {            for (var i = 0; i < inventory.Items.Count; i++)            {                var item = inventory.Items[i];                if (item.Item.ID != itemData.ID) continue;                item.Amount -= amount;                if (item.Amount <= 0)                {                    inventory.Items.RemoveAt(i);                    inventory.RemoveItemNotifier.Notify();                }                else                {                    inventory.DecreaseAmountItemNotifier.Notify();                }                return;            }        }        private bool HasEnoughItems(ItemData itemData, int requiredAmount)        {            foreach (var item in inventory.Items)            {                if (item.Item.ID == itemData.ID)                    return item.Amount >= requiredAmount;            }            return false;        }    }}